# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Build and Release

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    permissions:
          contents: write # This is the crucial permission for creating releases
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v5
    
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B build
        -DCMAKE_CXX_COMPILER=cl
        -DCMAKE_C_COMPILER=cl
        -DCMAKE_BUILD_TYPE=Release
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build build --config Release
      
    - name: Generate version tag
      id: version
      shell: bash
      run: |
        # Generate deterministic version based on date (UTC) and commit SHA
        # Using UTC ensures consistent timestamps across all matrix jobs
        VERSION="v$(date -u +'%Y.%m.%d')-${GITHUB_SHA::7}"
        echo "tag=$VERSION" >> "$GITHUB_OUTPUT"
        echo "Generated version: $VERSION"

    - name: Create Release and Upload Binary
      # Only create release once: on push to master and only for the MSVC compiler configuration
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        name: Release ${{ steps.version.outputs.tag }}
        files: build/keyrate.exe
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
